{"version":3,"sources":["angular-sync-local-storage.js"],"names":[],"mappings":"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","file":"angular-sync-local-storage.js","sourcesContent":["'use strict';\n\n/**\n  * @ngdoc overview\n  * @name angularSyncLocalStorage\n  * @description\n  * Allows you to automatically synchronize an object with localStorage across browser windows using angular's digest cycle.\n */\n\nclass AngularSyncLocalStorageProvider {\n  constructor() {\n    this.debounceSyncDelay = 300\n  }\n  $get($rootScope, $window, $timeout) {\n    return new AngularSyncLocalStorage($rootScope, $window, $timeout, this) // pass in the provider instance\n  }\n}\n\nfunction AngularSyncLocalStorageProviderFactory () {\n  return new AngularSyncLocalStorageProvider\n}\n\nclass AngularSyncLocalStorage {\n\n  constructor($rootScope, $window, $timeout, providerInstance) {\n    this.$rootScope = $rootScope\n    this.$window = $window\n    this.$timeout = $timeout\n    this.localStorage = $window.localStorage\n    this.supportsLocalStorage = supportsLocalStorage\n    this.debounce = debounce\n    this.sync = sync\n    this.providerInstance = providerInstance\n    this.syncLocal = angular.noop\n  }\n\n  _queryUpdateStorage() {\n    if(this.syncLocal()) {\n      // NOTE timeout is needed because this has the potential to be broadcasted before the ready \n      // event is fired in jquery where this is being listened for\n      // on updated occurs when localStorage is updated outside of the application\n      // and you may have services that need to query the data (such as session information)\n      this.$timeout(() => {\n        this.$rootScope.$broadcast('sls:updated')\n      })\n      this.$rootScope.$digest()\n    }\n  }\n\n  _updateLocalStorage(key, value) {\n    this.localStorage[key] = angular.toJson(value)\n  }\n\n  synchronize(localObject, persistKey, initialSync = true) {\n\n    let localObjStringType = Object.prototype.toString.call(localObject)\n\n    if(localObjStringType === '[object Object]' || localObjStringType === '[object Array]') {\n      throw new Error('AngularSyncLocalStorage: object to synchronize with must be an hash or an array.')\n    }\n\n    if (!this.supportsLocalStorage()) {\n      // silently die if there is no localStorage support\n      return\n    }\n    var synchronizeLocalStorage\n\n    this.syncLocal = this.sync(this.localStorage, persistKey, localObject)\n\n    if (initialSync) {\n      // if we want to initially sync, it will override what's currently in the local object with what is in localStorage\n      this.syncLocal()\n    }\n    // set up to update localStorage only every debounce time\n    // only affects performance of the other windows receiving the update\n    synchronizeLocalStorage = this.debounce((ls) => {\n      this._updateLocalStorage(persistKey, ls)\n    }, this.providerInstance.debounceSyncDelay)\n\n    // deep watch localObject for changes, update localStorage when whey occur\n    this.$rootScope.$watch(() => {\n      return localObject\n    }, synchronizeLocalStorage, true)\n\n    // listen for storage changes, notify\n    this.$window.addEventListener('storage', this._queryUpdateStorage.bind(this))\n\n  }\n\n}\n\nangular.module('angularSyncLocalStorage', []).provider('synchronizedLocalStorage', AngularSyncLocalStorageProviderFactory)\n\n// helper functions - move to better place\nfunction supportsLocalStorage() {\n  var testKey = 'test',\n      storage = window.localStorage\n  try {\n    storage.setItem(testKey, '1')\n    storage.removeItem(testKey)\n    return true\n  } catch (error) {\n    return false\n  }\n}\n// remove dependency of underscore\nfunction debounce(func, wait, immediate) {\n  var timeout\n  return function() {\n    var context = this, args = arguments\n    var later = function() {\n      timeout = null\n      if (!immediate) func.apply(context, args)\n    }\n    var callNow = immediate && !timeout\n    clearTimeout(timeout)\n    timeout = setTimeout(later, wait)\n    if (callNow) func.apply(context, args)\n  }\n}\n\nfunction sync(storageService, key, localObject) {\n  return function () {\n    var fromStorageContainer\n    // if there's no container (such as localStorage, then create it)\n    if(!storageService[key]) {\n      return false\n    } else {\n      fromStorageContainer = angular.fromJson(storageService[key])\n      // if the storage containers stuff isn't the same as the local object\n      if (!angular.equals(localObject, fromStorageContainer)) {\n        // update the local object with the storage containers stuff\n        taylorcode.updateModel(localObject, fromStorageContainer)\n        return true\n      }\n      return false\n    }\n  }\n}"],"sourceRoot":"/source/"}